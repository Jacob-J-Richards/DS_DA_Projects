(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
#train$y <- as.numeric(as.character(factor(train$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
library(nnet)
test
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
test$predicted_y <- predict(model, newdata = test, type = "class")
test
test$predicted_y <- predict(model, newdata = test, type = "class")
install.packages("pROC")
test$predicted_y <- predict(model, newdata = test, type = "class")
library(pROC)
test$predicted_y <- predict(model, newdata = test, type = "class")
library(pROC)
test
library(pROC)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
library(pROC)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test
library(pROC)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
#test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
#test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
library(pROC)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
#test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
library(pROC)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
train$y_numeric <- as.numeric(as.character(factor(train$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
train$y <- as.numeric(as.character(factor(train$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
train$y <- as.numeric(as.character(factor(train$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
train$y <- as.numeric(as.character(factor(train$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
train$y <- as.numeric(as.character(factor(train$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
train
train
test$predicted_y <- predict(model, newdata = test, type = "class")
test$y <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test$predicted_y <- predict(model, newdata = test, type = "class")
test$y <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test$predicted_y <- predict(model, newdata = test, type = "class")
test
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
test$predicted_y <- predict(model, newdata = test, type = "class")
test
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
test$predicted_y <- predict(model, newdata = test, type = "class")
test
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test
train$y <- relevel(factor(train$y), ref = "active")
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
train$y <- relevel(factor(train$y), ref = "active")
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
positive_class_probs <- test$predicted_probs[, "90+DPD"]
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
positive_class_probs <- test$predicted_probs[,"90+DPD"]
library(tidyverse)
train <- read.csv(file="FITB_train.csv",header=TRUE)
test <- read.csv(file="FITB_test.csv",header=TRUE)
train_unmodified <- train
library(ggplot2)
ggplot(data=train,aes(feature_3)) + geom_density()
ggplot(data=test,aes(feature_3)) + geom_density()
train$key <- row.names(train)
feature_3_winsor <- data.frame(feature_3 = train$feature_3, key = row.names(train))
feature_3_winsor_clean <- na.omit(feature_3_winsor)
feature_3_winsor_clean <- feature_3_winsor_clean %>%
mutate(z_score = (feature_3 - mean(feature_3)) / sd(feature_3),percentile = ecdf(feature_3)(feature_3) * 100)
feature_3_winsor_df <- feature_3_winsor_clean[!(feature_3_winsor_clean[, 4] < 1 | feature_3_winsor_clean[, 4] > 99), ]
non_matching_keys <- anti_join(train, feature_3_winsor_df, by = "key")$key
train <- train %>% mutate(feature_3 = ifelse(key %in% non_matching_keys, NA, feature_3))
colnames(train)[3] <- "feature_3_winsor"
ggplot(data=train,aes(feature_3_winsor)) + geom_density()
train[is.na(train[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(train)[3] <- "feature_3_impute"
test[is.na(test[,3]),3] <- median(feature_3_winsor_clean$feature_3)
colnames(test)[3] <- "feature_3_impute"
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),1]
train_unmodified[is.na(train_unmodified[,2]) , 2] <- train_unmodified[is.na(train_unmodified[,2]),3]
train$feature_2 <- train_unmodified$feature_2
colnames(train)[2] <- "feature_2_impute"
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),1]
test[is.na(test[,2]) , 2] <- test[is.na(test[,2]),3]
test$feature_2 <- test$feature_2
colnames(test)[2] <- "feature_2_impute"
train
(colnames(train))
library(ggplot2)
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
train
library(dplyr)
train <- train %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
train
ggplot(data=train,aes(x=feature_1)) + geom_density() + geom_density(data=train,aes(x=feature_2_impute)) + geom_density(data=train,aes(x=feature_3_impute))
colnames(train) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y","key")
test <- test %>%
mutate(across(c(feature_1, feature_2_impute, feature_3_impute, feature_4),
~ (.x - mean(.x, na.rm = TRUE)) / sd(.x, na.rm = TRUE)))
ggplot(data=test,aes(x=feature_1)) + geom_density() + geom_density(data=test,aes(x=feature_2_impute)) + geom_density(data=test,aes(x=feature_3_impute))
colnames(test) <- c("feature_1_standard","feature_2_standard","feature_3_standard","feature_4_standard","id","date","y")
train
model <- multinom(y ~ feature_1_standard + feature_2_standard + feature_3_standard + feature_4_standard, data=train,family=binomial())
summary(model)
test$predicted_y <- predict(model, newdata = test, type = "class")
test$predicted_probs <- predict(model, newdata = test, type = "probs")
test$y_numeric <- as.numeric(as.character(factor(test$y, levels = c("90+DPD", "active"), labels = c(1, 0))))
test
#positive_class_probs <- test$predicted_probs[,"90+DPD"]
